{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAkCA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IAzCMQ,SAASC,cAAc,SAE/BC,iBAAiB,UAEtB,SAAkBC,GAChBA,EAAEC,iBAUF,IARA,IAEmBC,EAAfF,EAAEG,cADJC,SAAYC,EAAKH,EAALb,MAAOiB,EAAIJ,EAAJI,KAAMC,EAAML,EAANK,OAGrBC,EAAkBC,OAAOJ,EAAMK,OAC/BC,EAAiBF,OAAOH,EAAKI,OAC7BE,EAAmBH,OAAOF,EAAOG,OAE9BG,EAAI,EAAGA,GAAKD,EAAkBC,GAAK,EAAG,CAM7C1B,EAAc0B,EADGL,GAAmBK,EAAI,GAAKF,GAE1CG,MAAK,SAAAC,G,IAAG3B,EAAQ2B,EAAR3B,SAAUC,EAAK0B,EAAL1B,MAClBJ,EAAA+B,OAAOC,QAAQ,uBAAwCC,OAAf9B,EAAS,QAAY8B,OAAN7B,EAAM,M,IAE7D8B,OAAM,SAAAJ,G,IAAG3B,EAAQ2B,EAAR3B,SAAUC,EAAK0B,EAAL1B,MAClBJ,EAAA+B,OAAOI,QAAQ,sBAAqCF,OAAf9B,EAAS,QAAY8B,OAAN7B,EAAM,M,IAGhEW,EAAEG,cAAckB,O","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst form = document.querySelector('.form');\n\nform.addEventListener('submit', onSubmit);\n\nfunction onSubmit(e) {\n  e.preventDefault();\n\n  const {\n    elements: { delay, step, amount },\n  } = e.currentTarget;\n\n  const delayInputValue = Number(delay.value);\n  const stepInputValue = Number(step.value);\n  const amountInputValue = Number(amount.value);\n\n  for (let i = 1; i <= amountInputValue; i += 1) {\n    // if ((delayInputValue < 0 && stepInputValue < 0) || (amountInputValue <= 0)) {\n    //   Notify.failure('❌ Can not be negative values!');\n    //   return;\n    // } \n    const newDelay = delayInputValue + (i - 1) * stepInputValue;\n    createPromise(i, newDelay)\n      .then(({ position, delay }) => {\n       Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n  e.currentTarget.reset();\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","document","querySelector","addEventListener","e","preventDefault","_elements","currentTarget","elements","delay1","step","amount","delayInputValue","Number","value","stepInputValue","amountInputValue","i","then","param","Notify","success","concat","catch","failure","reset"],"version":3,"file":"03-promises.da657107.js.map"}